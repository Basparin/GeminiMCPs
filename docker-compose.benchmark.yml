version: '3.8'

services:
  # CodeSage MCP Server for benchmarking
  codesage-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8000
      - LOG_LEVEL=INFO
      - CACHE_SIZE_MB=512
      - MAX_MEMORY_USAGE_PERCENT=80
      - ENABLE_PERFORMANCE_MONITORING=true
      - ENABLE_AUTO_TUNING=true
    volumes:
      - ./logs:/app/logs
      - ./benchmark_results:/app/benchmark_results
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - benchmark-network

  # Benchmark runner service
  benchmark-runner:
    build:
      context: .
      dockerfile: Dockerfile.benchmark
    depends_on:
      codesage-mcp:
        condition: service_healthy
    environment:
      - SERVER_URL=http://codesage-mcp:8000/mcp
      - TEST_ITERATIONS=5
      - CONCURRENT_USERS=10
      - ENABLE_EDGE_CASES=true
      - RESULTS_DIR=/app/benchmark_results
    volumes:
      - ./benchmark_results:/app/benchmark_results
      - ./scripts:/app/scripts
      - ./tests:/app/tests
    networks:
      - benchmark-network
    command: ["python", "/app/scripts/run_parameterized_benchmark.py", "--config", "default", "--users", "10", "--iterations", "5"]

  # Load testing service
  load-tester:
    image: locustio/locust:latest
    ports:
      - "8089:8089"
    volumes:
      - ./benchmark/load_test.py:/mnt/locust/load_test.py
    environment:
      - LOCUSTFILE_PATH=/mnt/locust/load_test.py
      - TARGET_URL=http://codesage-mcp:8000/mcp
    depends_on:
      codesage-mcp:
        condition: service_healthy
    networks:
      - benchmark-network
    command: ["--host", "http://codesage-mcp:8000", "--users", "100", "--spawn-rate", "10", "--run-time", "5m"]

  # Monitoring service
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/benchmark.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - benchmark-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - benchmark-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - benchmark-network

volumes:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  benchmark-network:
    driver: bridge