# CodeSage MCP Server - Production Environment Configuration
# =================================================================
# This configuration is optimized for production environments with
# security hardening, performance optimization, and comprehensive monitoring.

# =================================================================
# LLM API CONFIGURATION
# =================================================================

# Primary LLM Provider (choose one - use secure secret management)
GROQ_API_KEY="your-production-groq-api-key"
OPENROUTER_API_KEY="your-production-openrouter-api-key"
GOOGLE_API_KEY="your-production-google-api-key"

# =================================================================
# PERFORMANCE & MEMORY CONFIGURATION
# =================================================================

# Memory Management
MAX_MEMORY_MB=2048
ENABLE_MEMORY_MONITORING=true

# Model Optimization
ENABLE_MODEL_QUANTIZATION=false
MODEL_CACHE_TTL_MINUTES=120
ENABLE_MEMORY_MAPPED_INDEXES=true

# =================================================================
# SELF-OPTIMIZATION FEATURES (PRODUCTION OPTIMIZATIONS)
# =================================================================

# Enable all self-optimization features for production
ENABLE_AUTO_PERFORMANCE_TUNING=true
ENABLE_ADAPTIVE_CACHE_MANAGEMENT=true
ENABLE_WORKLOAD_PATTERN_RECOGNITION=true

# =================================================================
# CONNECTION POOL & TIMEOUT CONFIGURATION
# =================================================================

# Connection Pool Configuration
HTTP_CONNECTION_POOL_SIZE=20
HTTP_MAX_KEEPALIVE_CONNECTIONS=10

# Progressive Timeout Configuration
FAST_OPERATION_TIMEOUT=0.5
MEDIUM_OPERATION_TIMEOUT=2.0
SLOW_OPERATION_TIMEOUT=10.0
VERY_SLOW_OPERATION_TIMEOUT=60.0

# Adaptive Timeout Configuration
ADAPTIVE_TIMEOUT_ENABLED=true
ADAPTIVE_TIMEOUT_LOAD_FACTOR=1.5

# Connection Pool Monitoring
ENABLE_CONNECTION_POOL_MONITORING=true

# =================================================================
# CIRCUIT BREAKER CONFIGURATION
# =================================================================

# Circuit Breaker for Resilience
CIRCUIT_BREAKER_FAILURE_THRESHOLD=10
CIRCUIT_BREAKER_RECOVERY_TIMEOUT=60
CIRCUIT_BREAKER_SUCCESS_THRESHOLD=3

# =================================================================
# CACHING CONFIGURATION
# =================================================================

# Cache Sizes (optimized for production)
EMBEDDING_CACHE_SIZE=10000
SEARCH_CACHE_SIZE=2000
FILE_CACHE_SIZE=200

# Cache Behavior
CACHE_SIMILARITY_THRESHOLD=0.9
MAX_FILE_SIZE_MB=2
ENABLE_CACHE_PERSISTENCE=true
ENABLE_CACHE_WARMING=true

# =================================================================
# INDEXING CONFIGURATION
# =================================================================

# Indexing Options
ENABLE_INCREMENTAL_INDEXING=true
FORCE_FULL_REINDEX=false
INDEX_TYPE=auto
CHUNK_SIZE_TOKENS=750

# =================================================================
# LOGGING CONFIGURATION
# =================================================================

# Logging Level (use Python logging levels: DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# =================================================================
# PRODUCTION NOTES
# =================================================================
# - This configuration is optimized for production workloads
# - Security hardening and monitoring features enabled
# - Resource limits set for reliable operation
# - Comprehensive logging and metrics collection
# - Adaptive features enabled for self-optimization
#
# Security Considerations:
# - Store API keys securely (use Docker secrets or KMS)
# - Configure SSL/TLS certificates
# - Set up proper firewall rules
# - Enable audit logging
# - Regular security updates
#
# Monitoring Setup:
# - Configure Prometheus metrics scraping
# - Set up Grafana dashboards
# - Configure alerting rules
# - Set up log aggregation
#
# For high-performance needs, see config/templates/high-performance.env
# For memory-constrained environments, see config/templates/memory-constrained.env