apiVersion: apps/v1
kind: Deployment
metadata:
  name: ces-web
  namespace: ces-production
  labels:
    app: ces-web
    version: v4.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: ces-web
  template:
    metadata:
      labels:
        app: ces-web
        version: v4.0
    spec:
      containers:
      - name: ces-web
        image: ${DOCKER_REGISTRY}/ces_web:v4.0
        ports:
        - containerPort: 8001
          name: http
        - containerPort: 8000
          name: api
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: PYTHONPATH
          value: "/app"
        - name: REDIS_URL
          value: "redis://ces-redis-cluster:6379"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ces-secrets
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: ces-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        - name: cache-volume
          mountPath: /app/cache
      volumes:
      - name: logs-volume
        persistentVolumeClaim:
          claimName: ces-logs-pvc
      - name: cache-volume
        emptyDir: {}
      serviceAccountName: ces-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ces-api
  namespace: ces-production
  labels:
    app: ces-api
    version: v4.0
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: ces-api
  template:
    metadata:
      labels:
        app: ces-api
        version: v4.0
    spec:
      containers:
      - name: ces-api
        image: ${DOCKER_REGISTRY}/ces_api:v4.0
        ports:
        - containerPort: 8000
          name: api
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: PYTHONPATH
          value: "/app"
        - name: REDIS_CLUSTER_NODES
          value: "ces-redis-cluster-0:6379,ces-redis-cluster-1:6379,ces-redis-cluster-2:6379"
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: logs-volume
        persistentVolumeClaim:
          claimName: ces-logs-pvc
      serviceAccountName: ces-service-account

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ces-redis-cluster
  namespace: ces-production
  labels:
    app: ces-redis-cluster
spec:
  serviceName: ces-redis-cluster
  replicas: 3
  selector:
    matchLabels:
      app: ces-redis-cluster
  template:
    metadata:
      labels:
        app: ces-redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-config
        configMap:
          name: ces-redis-config
      - name: redis-data
        persistentVolumeClaim:
          claimName: ces-redis-pvc
  volumeClaimTemplates:
  - metadata:
      name: ces-redis-pvc
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ces-postgres
  namespace: ces-production
  labels:
    app: ces-postgres
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: ces-postgres
  template:
    metadata:
      labels:
        app: ces-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: ces_prod
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: ces-secrets
              key: db-username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ces-secrets
              key: db-password
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - ces_prod
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - ces_prod
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: ces-postgres-pvc

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ces-ingress
  namespace: ces-production
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - ces.example.com
    secretName: ces-tls
  rules:
  - host: ces.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: ces-api
            port:
              number: 8000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ces-web
            port:
              number: 8001

---
apiVersion: v1
kind: Service
metadata:
  name: ces-web
  namespace: ces-production
  labels:
    app: ces-web
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http
  selector:
    app: ces-web

---
apiVersion: v1
kind: Service
metadata:
  name: ces-api
  namespace: ces-production
  labels:
    app: ces-api
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: api
  selector:
    app: ces-api

---
apiVersion: v1
kind: Service
metadata:
  name: ces-redis-cluster
  namespace: ces-production
  labels:
    app: ces-redis-cluster
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: ces-redis-cluster

---
apiVersion: v1
kind: Service
metadata:
  name: ces-postgres
  namespace: ces-production
  labels:
    app: ces-postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: ces-postgres

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ces-redis-config
  namespace: ces-production
data:
  redis.conf: |
    cluster-enabled yes
    cluster-config-file /data/nodes.conf
    cluster-node-timeout 5000
    appendonly yes
    maxmemory 512mb
    maxmemory-policy allkeys-lru

---
apiVersion: v1
kind: Secret
metadata:
  name: ces-secrets
  namespace: ces-production
type: Opaque
data:
  database-url: <base64-encoded-database-url>
  jwt-secret: <base64-encoded-jwt-secret>
  db-username: <base64-encoded-username>
  db-password: <base64-encoded-password>

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ces-postgres-pvc
  namespace: ces-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ces-logs-pvc
  namespace: ces-production
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ces-pdb
  namespace: ces-production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: ces-web

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ces-web-hpa
  namespace: ces-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ces-web
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ces-api-hpa
  namespace: ces-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ces-api
  minReplicas: 5
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  - type: Pods
    pods:
      metric:
        name: requests_per_second
      target:
        type: AverageValue
        averageValue: "100"